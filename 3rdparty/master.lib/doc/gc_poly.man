------------------------------------------------------------------------
                    master.lib 0.22j [gc_poly.lib part]

            グラフィックチャージャーを利用した多角形描画関数群

                            著作・恋塚昭彦

------------------------------------------------------------------------

*** このライブラリで扱う内容

        　gc_poly.lib は、 Ｎ角形描画ルーチンのライブラリです。
        そして、Ｎ角形は、 「Ｎ個の点のそれぞれの間を直線で結ん
        だ輪郭をもつ図形」と定義します。
        　ここでＮは１以上の整数とし、１角形は点を、 ２角形は直
        線、３角形以上は多角形になります。
        　この定義から、 このライブラリでは一般的にいう多角形、
        そして直線と点を扱います。
        　また、多角形描画ルーチンのライブラリということで、 動
        作に必要な情報の取得以外の読み取り、 たとえば画面に既に
        存在するの画像を読み込むなどの機能は含めません。 また、
        幾何学図形の処理に不可欠な計算関数がオマケに入っていま 
        す。

        　扱うハードウェアについては、NEC PC-9801シリーズに搭載
        されているグラフィック描画関連の補助ハードウェアを駆動 
        するものをメインとします。具体的には、GRCG,EGC,GDC の３
        つを使用します。

*** 用語について

        ○クリップ枠
                　BASICをやったことがある方なら、ビューポートと
                言えばわかるかな。
                　グラフィック操作を行うときに、 範囲を限定する
                領域のことで、 gc_poly では常に長方形です。
                通常は画面全体になります。

        ○クリッピング
                　クリップ枠に入り切らない図形の、 はみ出ている
                部分を切り捨てる処理のことです。 クリップ枠を設
                定することで、その外側の画面を保護します。

        ○凸多角形(Convex Polygon)
                　輪郭にへこんでいる部分がない多角形です。
                高速に処理ができ、 凸のデータを用意するのは簡単
                なので、よく使われます。
                　クリッピングによって 複数に分断されることがあ
                りません。

        ○凹多角形(Nonconvex Polygon)
                　輪郭にへこんでいる部分がある多角形です。
                中途半端な形状なので、 一般には次の複雑な多角形
                処理を利用します。

        ○複雑な多角形(Complex Polygon)
                　輪郭の中に、 自分の中の他の輪郭と交差する部分
                を持つ多角形です。
                　この図形が処理できるプログラムは、 他の形の多
                角形(凸、凹)も処理できますが、 少し処理が遅くな
                ります。
                　多角形の形状が、 乱数やユーザー入力になる場合
                この処理がよく使われます。
                　一般に「多角形」という場合、これを差します。

*** 座標系について
        　gc_poly で用いる座標系は、(0,0) を画面左上隅とし、 ｘ
        座標は右に行くに従って大きくなり、 ｙ座標は下に行くに従
        って大きな値になり、(639,399)が右下端となります。が、描 (640x400の場合)
        画はされないまでも指定できる値範囲は、 ｘ，ｙともに符号
        付き 16bit 整数の範囲、 すなわち -32768 〜32767で小数で
        ない値が指定できます。
        　また、 座標と点は 「将棋盤のように」 ます目に座標値が
        対応します。 碁盤のような格子ではありません。
        よって、 1 dot 長の直線は点と等しく、始点と終点の座標が
        一致することになります。

*** GRCG,GDC,EGCの制御についての注意

        　このライブラリは、GRCG,GDC,EGC を直接制御することによ
        り効率よくグラフィック描画を行う事を主体としている関係 
        上、これらのハードウェアについて注意が必要です。
        　GRCG,GDC,EGC はそれぞれが、一つしかないグラフィック画
        面を CPU にかわって直接アクセスするため、どれかのスイッ
        チが入っているときは、 他のもののスイッチは入れないで下
        さい。 また、CPU が、これらのハードウェアを併用する事を
        想定していないやりかたで直接 VRAM  をアクセスするのも危
        険です。
        　以下に、 各ハードウェアのスイッチを制御する関数を示し
        ます。
        ○ GRCG のスイッチを入れる
                grcg_setcolor
                grcg_and
                grcg_or
        ○ GRCG のスイッチを切る
                grcg_off

        ○ GDC を作動する
                gdc_line
                gdc_circle
        ○ GDC の動作終了を待つ
                gdc_wait

        ○ EGC を拡張モードにする
                egc_on
        ○ EGC を通常(GRCG 互換)モードにする
                egc_off

        ★ 特に、 各ハードウェアのスイッチをいれて gc_poly の描
        画機能を使ったあとに他の手段でグラフィック画面を操作す 
        る可能性がある場合、 かならずそのハードウェアの動作を停
        止させてください。

        　たとえば以下のようなときにはスイッチを切ってください。
        ○ マウスカーソルを表示する
        ○ 他の (master.lib の gc_poly 以外の部分も含む) グラフ
           ィックライブラリを使う
        ○ 子プロセスを呼ぶ、あるいはプログラムを終了する


*** 色指定について
        　表の、色の項目に GC と書かれている関数は、GRCG または
        EGC を用いることを前提に青プレーンに描画を行っています。
        このため、 前もって GRCG/EGC の動作設定をしておくことで
        自由な色の描画ができるようになっています。

        　GRCG/EGC のスイッチが入っている時に、それを期待しない
        GVRAM  のアクセスを行う処理を呼び出すと異常動作をします
        ので、プログラム終了や、 ソフトウェア割り込み (DOS のフ
        ァンクションも含む)を呼び出す時には注意してください。

        　特に EGC 搭載機では、 EGC のモードを GRCG 互換の RMW(
        grcg_setmode 項参照)に設定している場合、 GVRAM の読み込
        みをしようとするとハングアップしてしまいます。

[END OF GC_POLY.MAN]
