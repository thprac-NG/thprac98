------------------------------------------------------------------------

	master.lib-pf.lib のオートマチックモードの使い方

	(このドキュメントはtab 8で読んでください)

------------------------------------------------------------------------

■概要

	parファイルをより簡単にアクセスするために、
	pf.lib version 0.993 から提供している機能です。

	pfopen()、pfread()のような専用関数を使わなくても、C言語標準
	ライブラリのようなコンベンショナルな方法でparファイル内の
	ファイルを読込むことができるようになっています。


■使用方法

	parファイルのファイル名を引数としてpfstart()をコールすると
	オートマチックモードになります。オートマチックモードの状態では
	ファイルをリード用にオープンすると、parファイル内に格納されている
	ファイルをオープンしたことになります。続けてファイルリードを行えば
	そのparファイル内のファイルからのリードになります。ファイルを
	クローズした後に pfend()コールすればオートマチックモードは
	終了します。

	まとめると、基本的な手順は以下のようになります。

	(1)pfstart()で parファイルを指定する。

	(2)標準ライブラリ等でファイルをオープン、リード、クローズする。

	(3)pfend()で設定を解除する。


■具体例

	上記の使用方法ではわかりにくいので具体例をあげます。
	まず、parファイル test.par の中が下記のようになっているとします。

    *-------------------------------------------------------------------*
    |									|
    |	_filename_____original___packed___%____date______time___form	|
    |	 foo.cpp          4806     4806 100 1993-06-05 00:35:50   0	|
    |	 bar.fnt           682      682 100 1993-05-29 16:18:38   0	|
    |	 baz.bft          2516     2512  99 1993-06-15 23:42:14   1	|
    |									|
    *-------------------------------------------------------------------*

	このとき以下のようにコーディングすることで、この test.parの中の
	foo.cpp を表示することができます。
	(エラーチェックは省略しています)

    *-------------------------------------------------------------------*
    |									|
    |	pfstart("test.par");		// 以降のファイルオープンが	|
    |					// test.par内のファイルに対して	|
    |					// 行われるように準備する	|
    |									|
    |	fp = fopen("foo.cpp", "r");	// リードモードでfoo.cppを	|
    |					// オープンする			|
    |	while ((c = fgetc(fp)) != EOF)					|
    |		putchar(c);						|
    |	fclose(fp);							|
    |									|
    |	pfend();			// 用が済んだら必ずpfend()を	|
    |					// コールする			|
    |									|
    *-------------------------------------------------------------------*

	どうでしょう。pfstart()とpfend()の間は通常のファイル処理そのまま
	です。ここでは標準ファイル入力を使っていますが、低水準ファイル
	入力(open()やread())をでも構いません。
	でもこれだったら今まででどおり pfopen()、pfgetc()、pfclose()を
	使うのとあまり変わりありません。

	便利なのは、何か別のライブラリのファイル読込み関数に対しても使用
	できることです。

	再び test.par を使った例で説明します。
	今度は test.par の中の bar.fnt を gr.lib の gfLoad() で外字登録し、
	同じく baz.bft を master.lib の super_entry_bfnt() でパターン登録
	します。

    *-------------------------------------------------------------------*
    |									|
    |	pfstart("test.par");						|
    |									|
    |	gfLoad("bar.fnt", 0);						|
    |	super_entry_bfnt("baz.bft");					|
    |	// 両方ともリターンのチェックは省略している			|
    |									|
    |	pfend();							|
    |									|
    *-------------------------------------------------------------------*

	これでOKです。

	この方法を使えば、ほとんどのライブラリで parファイルから
	データを読みだすことができます。


■制約

	制約がたくさんあります。ファイルを読込むだけであればあまり制約には
	引っ掛らないと思いますが、意識しておいたほうがよいでしょう。


	・一時点に一つのファイルしかオープンできません。二つ以上のファイル
	  にアクセスしたいときはシーケンシャルに処理してください。
	  あるファイルをオープンしているときに二つ目のファイルをオープン
	  しようとした場合、オープンしているファイルを強制的にクローズして
	  新しいファイルをオープンします。

	・リードモードでオープンするファイルのみが対象です。ライトモード、
	  もしくはリード・ライトモードでオープンする ファイルは通常の
	  オープンになります。

	・オープンするファイルが parファイル内に見つからない場合も、
	  自動的に通常のオープンになります。

	・オープンしたファイルにできるのは操作は以下の3つだけです。
	    - リード
	    - カレントポジションから後方へのシーク
	    - クローズ

	・一度 pfstart()を実行したら、プログラムを終了する前に必ず
	  pfend()を実行してください。場合により暴走します。
	  通常の使い方としては、ファイルの読込みが終ったらすぐに
	  pfend() を実行することをお勧めします(その方が処理の無駄も
	  ありません)。

	・同じように、pfstart()を実行してから pfend() を実行する前に
	  (COMMAND.COM等の)子プロセスを実行しないで下さい。
	  暴走する確率がかなり高いでしょう。

	・注意すべきは他のライブラリのデータファイル読込み関数です。
	  上記の制約条件を満たしていれば使用できますが、どのような処理を
	  行っているのかはソースを見ないとわかりません。
	  データファイルを読込むタイプの関数ならまず大丈夫だとは思います。


■技術的解説

	MS-DOSのファイル系ファンクションコールをフックしているだけです。
	ハンドルのオープンのみを対象としています。FCBによるファイル
	オープンには対処していませんが、今となってはFCBを使うことも
	ないでしょう。

	なお、作者のMS-DOSプログラミング知識不足のため、考慮しきれていない
	状況があるかもしれません。あまり難しい使い方はしないでください:-)
